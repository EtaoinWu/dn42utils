name: Docker build and push

on:
  push:
    branches:
      - main
  schedule:
    - cron: '20 4 * * *'
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ secrets.DOCKERHUB_OWNER }}/babeld
      ALPINE_VERSION: '3.20'
    strategy:
      matrix:
        arch:
          - linux/amd64
          - linux/arm/v7
          - linux/arm64/v8
          - linux/riscv64
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Checkout upstream repo
        uses: actions/checkout@v4
        with:
          repository: jech/babeld
          path: babeld/babeld
          submodules: recursive
          fetch-depth: 0
      
      - name: Get version
        run: |
          # Get latest commit short hash
          SELF_REVISION=$(git rev-parse --short HEAD)
          cd babeld
          BABELD_REVISION=$(cd babeld && git rev-parse --short HEAD)

          echo "self revision: $SELF_REVISION"
          echo "babeld revision: $BABELD_REVISION"
          
          # Get real version from the code
          VERSION=$(cd babeld && git describe --dirty | sed 's/^babeld-/v/')

          # Convert IMAGE_TAG, HASH_VERSION and VERSION to lowercase (repository name must be lowercase)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | awk '{print tolower($0)}')
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          ARCH=${{ matrix.arch }}
          PLATFORM_PAIR=${ARCH//\//-}

          # Store variable for future use
          echo "SELF_REVISION=$SELF_REVISION" >> $GITHUB_ENV
          echo "BABELD_REVISION=$BABELD_REVISION" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PLATFORM_PAIR=$PLATFORM_PAIR" >> $GITHUB_ENV

          # Print debug info
          echo "version: $VERSION"
          echo "platform pair: $PLATFORM_PAIR"

          # Save env to file
          cd $GITHUB_WORKSPACE
          cat $GITHUB_ENV > github.env

      - name: Upload environment info as artifact
        uses: actions/upload-artifact@v4
        if: matrix.arch == 'linux/amd64'  # Run this step only once per all matrix builds
        with:
          name: github_env
          path: github.env

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Cache Docker layers
        uses: actions/cache@v4.1.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.PLATFORM_PAIR }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.PLATFORM_PAIR }}-

      - name: Login to Docker Hub registry
        uses: docker/login-action@v3.3.0
        if: ${{ github.event_name != 'pull_request' }}
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build image
        uses: docker/build-push-action@v6.9.0
        with:
          context: ./babeld
          file: ./babeld/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache
          platforms: ${{ matrix.arch }}
          build-args: |
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-${{ env.PLATFORM_PAIR }}

      - name: Tag and push image
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          docker push ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-${{ env.PLATFORM_PAIR }}

  push-manifest:
    name: Create and push multi-arch Docker manifest
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: image_*
      
      - name: Download environment info
        uses: actions/download-artifact@v4
        with:
          name: github_env

      - name: Load environment info
        run: |
          cat github.env > $GITHUB_ENV

      - name: Login to Docker Hub registry
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push manifest of multi-architecture image
        uses: int128/docker-manifest-create-action@v2
        with:
          tags: |
            ${{ env.IMAGE_TAG }}:${{ env.VERSION }}
            ${{ env.IMAGE_TAG }}:latest
          sources: |
            ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-amd64
            ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-arm-v7
            ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-arm64-v8
            ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-riscv64

